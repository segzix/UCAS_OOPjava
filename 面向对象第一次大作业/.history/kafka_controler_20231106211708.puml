@startuml
class KafkaController {
    
    +onNewTopicCreation(topics)
    +onNewPartitionCreations(parts)

    +onBrokerFailure(deadBrokers:Seq[Int])
    +onBrokerStartup(newBrokersSet:Seq[Int])
}

class ReplicaStateMachine{
    +partitionState:mutable.Map[TopicAndPartition,PartitionState]:val

    +startup()
    +initializeReplicaState()
    +handleStateChanges(partitions: Set[TopicAndPartition]):void

    -handleStateChange(sourceState:String,targetState:String):void
}

class PartitionStateMachine{
    +partitionState:mutable.Map[TopicAndPartition,PartitionState]:val

    +startup()
    +initializeReplicaState()
    +triggerOnlinePartitionStateChange()
    +handleStateChanges(partitions: Set[TopicAndPartition]):void
    //启动状态机时只针对新建和下线的的分区做状态转换，并采用批量请求方式发送给代理节点

    -handleStateChange(sourceState:String,targetState:String):void
}

class TopicDeletionManager(){
    +startReplicaDeletion(replicasToBeDeleted:Set[PartitionAndReplica])
    //开始删除，发送stopreplica请求

    +deleteTopicStopReplicaCallback(resp:AbstractRequestResponse,replica:Int)
    //处理发送StopReplicaResponse后的响应
    +completeReplicaDeletion(replicas:Set[PartitionAndReplica])
    //完成删除
}

class Car_Driver{
    -model: string
    -productionDate: int
    -Car_ID: int

    +getModel(): string
    +getProductionDate(): int
    +get_car_ID(): int
    +getWarrantyPeriod(): int
    -set_production_date(date: int): void
}
'Traffic Administration Bureau
class Car{
    Car_ID: int
    speed_score: int
    model: string
    productionDate: int

    +getModel(): string
    +getProductionDate(): int
    +get_speed_score(): int
    -setID(car_ID: int): void
    -setScore(speed_score: int): void
}

Car_Driver "1" -- "0..*" Car

Car "0..*" -- "1" Car_Factory
@enduml