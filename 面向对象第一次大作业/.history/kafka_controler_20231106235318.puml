@startuml
class KafkaController {
    
    +startup()
    +onNewTopicCreation()
    +onNewPartitionCreations()

    +onBrokerFailure()
    +onBrokerStartup()

}

class ZK_broker

class SessionExpirationListener{
    +handleNewSession()
}

class OfflinePartitionLeaderSelector{
    +selectLeader()
}

class ReplicaStateMachine{
    +partitionState:mutable.Map[TopicAndPartition,PartitionState]:val

    +startup()
    +initializeReplicaState()
    +handleStateChanges():void
    -handleStateChange():void
    
}

class PartitionStateMachine{
    +partitionState:mutable.Map[TopicAndPartition,PartitionState]:val

    +startup()
    +initializeReplicaState()
    +triggerOnlinePartitionStateChange()
    +handleStateChanges()

    -handleStateChange():void
}

class TopicDeletionManager{
    +startReplicaDeletion()
    ' 开始删除，发送stopreplica请求

    +deleteTopicStopReplicaCallback()
    ' 处理发送StopReplicaResponse后的响应
    +completeReplicaDeletion()
    ' 完成删除
}

class PartitionModificationsListener{
    +handleDataChange()
}

class TopicChangeListener{
    +handleDataChange()
}

class BrokerChangeListener{
    +handleChildChange()
}

class PartitionsReassignedListener{
    +handleDataChange()
    +initiateReassignReplicasForTopicPartition()
}

class ReassignedPartitionsIsrChangeListener{
    +areReplicasInIsr()
    +onPartitionReassignment()

    +handleDataChange()
}

class ReassignedPartitionsLeaderSelector{
    +selectLeader()
}

class DeleteTopicListener

' 控制器网络通道管理器
class ControllerChannelManager{
    brokerStateInfo = newHashMap[Int,ControllerBrokerStateInfo]

    -addNewBroker()
    -removeExistingBroker()
}

' 控制器以批量方式发送请求给代理节点
class ControllerBrokerRequestBatch{
    +newBatch()
    +addLeaderAndIsrRequestForBrokers()
    +sendRequestsToBrokers()
}

PartitionModificationsListener -- ZK_broker
SessionExpirationListener -- ZK_broker
TopicChangeListener -- ZK_broker
BrokerChangeListener -- ZK_broker
PartitionsReassignedListener -- ZK_broker
ReassignedPartitionsIsrChangeListener -- ZK_broker

@enduml