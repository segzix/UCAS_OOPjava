@startuml
tryTopicDeletion-> resumeDeletions
activate resumeDeletions
enqueueTopicsForDeletion-> resumeDeletions

resumeDeletionForTopics-> resumeDeletions
failReplicaDeletion-> resumeDeletions 

alt controller.replicaStateMachine.areAllReplicasForTopicDeleted(topic)
resumeDeletions-> completeDeleteTopic
activate completeDeleteTopic
completeDeleteTopic--> resumeDeletions
deactivate completeDeleteTopic
else else
alt controller.replicaStateMachine.isAtLeastOneReplicaInDeletionStartedState(topic)
resumeDeletions -> replicaStateMachine: 调用replicasInState()方法
activate replicaStateMachine
replicaStateMachine--> resumeDeletions: 无返回值
deactivate replicaStateMachine
else else
resumeDeletions-> markTopicForDeletionRetry
activate markTopicForDeletionRetry
markTopicForDeletionRetry--> resumeDeletions
deactivate markTopicForDeletionRetry
end
end

resumeDeletions -> onTopicDeletion
activate onTopicDeletion

onTopicDeletion -> kafkaController: 调用sendUpdateMetadataRequest()方法
activate kafkaController
kafkaController --> onTopicDeletion: 无返回值
deactivate kafkaController

onTopicDeletion -> onPartitionDeletion
activate onPartitionDeletion
onPartitionDeletion -> startReplicaDeletion
activate startReplicaDeletion

startReplicaDeletion -> replicaStateMachine: 调用handleStateChanges()方法
replicaStateMachine --> startReplicaDeletion: 无返回值
startReplicaDeletion -> markTopicIneligibleForDeletion
markTopicIneligibleForDeletion --> startReplicaDeletion

startReplicaDeletion --> onPartitionDeletion
deactivate startReplicaDeletion
onPartitionDeletion --> onTopicDeletion
deactivate onPartitionDeletion

onTopicDeletion --> resumeDeletions
deactivate onTopicDeletion
deactivate resumeDeletions


' handleStateChanges-> controllerChannelManager: 调用newBatch方法
' controllerChannelManager-> handleStateChanges:无返回值

' handleStateChanges-> doHandleStateChanges

' opt uninitializedPartitions.nonEmpty
' doHandleStateChanges-> initializeLeaderAndIsrForPartitions
' initializeLeaderAndIsrForPartitions-> controllerChannelManager: 调用addLeaderAndIsrRequestForBrokers方法
' controllerChannelManager-> initializeLeaderAndIsrForPartitions: 无返回值
' initializeLeaderAndIsrForPartitions-> doHandleStateChanges
' end

' opt partitionsToElectLeader.nonEmpty
' doHandleStateChanges-> electLeaderForPartitions
' electLeaderForPartitions-> doElectLeaderForPartitions

' opt partitionLeaderElectionStrategy match OfflinePartitionLeaderElectionStrategy
' doElectLeaderForPartitions-> leaderForOffline
' leaderForOffline-> doElectLeaderForPartitions
' end
' opt partitionLeaderElectionStrategy match ReassignPartitionLeaderElectionStrategy
' doElectLeaderForPartitions-> leaderForReassign
' leaderForReassign-> doElectLeaderForPartitions
' end
' opt partitionLeaderElectionStrategy match PreferredReplicaPartitionLeaderElectionStrategy
' doElectLeaderForPartitions-> leaderForPreferredReplica 
' leaderForPreferredReplica-> doElectLeaderForPartitions
' end
' opt partitionLeaderElectionStrategy match ControlledShutdownPartitionLeaderElectionStrategy
' doElectLeaderForPartitions-> leaderForControlledShutdown
' leaderForControlledShutdown-> doElectLeaderForPartitions 
' end

' doElectLeaderForPartitions-> electLeaderForPartitions 
' electLeaderForPartitions-> doHandleStateChanges
' end

' doHandleStateChanges-> handleStateChanges

' handleStateChanges-> controllerChannelManager: 调用sendRequestsToBrokers方法
' controllerChannelManager-> handleStateChanges:无返回值

' triggerOnlinePartitionStateChange-> startup
' handleStateChanges-> triggerOnlinePartitionStateChange 

@enduml