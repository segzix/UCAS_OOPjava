@startuml

startup-> initializePartitionState: 调用updateAssignedReplicasForPartition方法
initializePartitionState-> startup:获取partitionReplicaAssignment变量

startup-> triggerOnlinePartitionStateChange
triggerOnlinePartitionStateChange-> handleStateChanges 

handleStateChanges-> controllerChannelManager: 调用newBatch方法
controllerChannelManager-> handleStateChanges:无返回值

handleStateChanges-> doHandleStateChanges

doHandleStateChanges-> initializeLeaderAndIsrForPartitions
initializeLeaderAndIsrForPartitions-> controllerChannelManager: 调用addLeaderAndIsrRequestForBrokers方法
controllerChannelManager-> initializeLeaderAndIsrForPartitions: 无返回值
initializeLeaderAndIsrForPartitions-> doHandleStateChanges

doHandleStateChanges-> electLeaderForPartitions
electLeaderForPartitions-> doElectLeaderForPartitions

doElectLeaderForPartitions-> leaderForOffline
leaderForOffline-> doElectLeaderForPartitions
doElectLeaderForPartitions-> leaderForReassign
leaderForReassign-> doElectLeaderForPartitions
doElectLeaderForPartitions-> leaderForPreferredReplica 
leaderForPreferredReplica-> doElectLeaderForPartitions
doElectLeaderForPartitions-> leaderForControlledShutdown
leaderForControlledShutdown-> doElectLeaderForPartitions 

doElectLeaderForPartitions-> electLeaderForPartitions 
electLeaderForPartitions-> doHandleStateChanges

dohandleStateChanges-> HandleStateChanges

handleStateChanges-> controllerChannelManager: 调用sendRequestsToBrokers方法
controllerChannelManager-> handleStateChanges:无返回值

triggerOnlinePartitionStateChange-> startup
handleStateChanges-> triggerOnlinePartitionStateChange 

' kafka_controller-> kafka_controller: 调用moveReassignedPartitionLeaderIfRequired方法
' kafka_controller-> partitionStateMachine: 调用handleStateChanges方法
' partitionStateMachine-> partitionStateMachine: 调用dohandleStateChanges方法
' partitionStateMachine-> kafka_controller: 无返回值

' kafka_controller-> kafka_controller: 调用stopOldReplicasOfReassignedPartition方法
' kafka_controller-> replicaStateMachine: 调用handleStateChanges方法
' replicaStateMachine-> replicaStateMachine: 调用dohandleStateChanges方法
' replicaStateMachine-> kafka_controller: 无返回值

' kafka_controller-> kafka_controller: 调用updateAssignedReplicasForPartition方法
' kafka_controller-> partitionStateMachine: 调用handleStateChanges方法
' partitionStateMachine-> partitionStateMachine: 调用dohandleStateChanges方法
' partitionStateMachine-> kafka_controller: 无返回值

' kafka_controller-> kafka_controller: 调用sendUpdateMetadataRequest方法
' kafka_controller-> controllerChannelManager: 调用addUpdateMetadataRequestForBrokers，sendRequestsToBrokers方法
' controllerChannelManager-> kafka_controller: 无返回值

' kafka_controller-> topicDeletionManager: 调用resumeDeletionForTopics方法
' topicDeletionManager-> kafka_controller: 无返回值

' kafka_controller-> kafka_controller: 调用updateLeaderEpochAndSendRequest方法
' kafka_controller-> kafka_controller: 调用updateLeaderEpochAndSendRequest方法
' kafka_controller-> kafka_controller: 调用updateLeaderEpochAndSendRequest方法
' kafka_controller-> kafka_controller: 调用updateLeaderEpochAndSendRequest方法
' kafka_controller-> kafka_controller: 调用updateLeaderEpochAndSendRequest方法
' kafka_controller-> kafka_controller: 调用updateLeaderEpochAndSendRequest方法
' Server->Device:调用write方法
' Device-->Server:方法返回，无返回值
' Client->Server:调用close方法
' Server-->Client:方法返回，无返回值
' Client-->Actor:程序执行完毕

@enduml